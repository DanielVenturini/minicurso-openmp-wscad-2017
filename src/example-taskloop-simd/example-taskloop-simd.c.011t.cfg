
;; Function init_array (init_array, funcdef_no=2, decl_uid=3556, cgraph_uid=2, symbol_order=5)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
init_array ()
{
  int i;
  struct _IO_FILE * stdout.0;

  <bb 2>:
  stdout.0 = stdout;
  __builtin_fwrite ("Inicializando os arrays.\n", 1, 25, stdout.0);
  i = 0;
  goto <bb 4>;

  <bb 3>:
  h_a[i] = 5.0e-1;
  h_b[i] = 5.0e-1;
  i = i + 1;

  <bb 4>:
  if (i <= 1048575)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  return;

}



;; Function func (func, funcdef_no=3, decl_uid=3562, cgraph_uid=3, symbol_order=6)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
;; 2 succs { 3 17 }
;; 3 succs { 4 15 }
;; 4 succs { 5 11 }
;; 5 succs { 6 7 }
;; 6 succs { 6 7 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 }
;; 10 succs { 5 11 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 14 }
;; 14 succs { 15 }
;; 15 succs { 16 }
;; 16 succs { 3 17 }
;; 17 succs { 18 }
;; 18 succs { 1 }
func ()
{
  int i;
  int D.3591;
  int D.3590;
  int i;
  double D.3573;
  double D.3572;
  double D.3571;
  int * D.3596;
  int i;
  int i.1;
  struct  .omp_data_o.3;
  long int D.3576;
  long int D.3575;

  <bb 2>:
  #pragma omp taskloop num_tasks(4)
  for (i.1 = 0; i.1 <= 1048575; i.1 = i.1 + 1)

  <bb 3>:
  .omp_data_o.3.i = &i;
  #pragma omp taskloop _looptemp_(D.3576) _looptemp_(D.3575) private(i.1) shared(i) [child fn: func._omp_fn.0 (.omp_data_o.3)]

  <bb 4>:
  .omp_data_i = (struct  & restrict) &.omp_data_o.3;
  D.3582 = .omp_data_i->D.3581;
  D.3584 = .omp_data_i->D.3583;
  i.1 = 0;
  #pragma omp taskloop _looptemp_(D.3582) _looptemp_(D.3584) lastprivate(i)
  for (i.1 = 0; i.1 <= 1048575; i.1 = i.1 + 1)

  <bb 5>:
  i = 0;
  #pragma omp simd _looptemp_(D.3590) _looptemp_(D.3591) linear(i:1)
  for (i = 0; i <= 1048575; i = i + 1)

  <bb 6>:
  D.3571 = h_a[i];
  D.3572 = h_b[i];
  D.3573 = D.3571 * D.3572;
  h_c[i] = D.3573;
  #pragma omp continue (i, i)

  <bb 7>:
  if (i == 1048576)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  i = i;

  <bb 9>:
  #pragma omp return(nowait)

  <bb 10>:
  #pragma omp continue (i.1, i.1)

  <bb 11>:
  if (i.1 == 1048576)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  D.3596 = .omp_data_i->i;
  *D.3596 = i;

  <bb 13>:
  #pragma omp return

  <bb 14>:
  #pragma omp continue (0, 0)

  <bb 15>:
  #pragma omp return

  <bb 16>:
  .omp_data_o.3 = {CLOBBER};
  #pragma omp continue (i.1, i.1)

  <bb 17>:
  #pragma omp return

  <bb 18>:
  return;

}



;; Function main (main, funcdef_no=4, decl_uid=3567, cgraph_uid=4, symbol_order=7)

Removing basic block 9
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;; 2 succs { 3 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 9 }
;; 9 succs { 1 }
main (int argc, char * * argv)
{
  _Bool D.3637;
  int D.3629;
  struct _IO_FILE * stdout.6;
  long int D.3627;
  int D.3626;
  long int D.3625;
  long unsigned int D.3624;
  struct _IO_FILE * stdout.4;
  long int D.3617;
  int D.3616;
  long int D.3615;
  long unsigned int D.3614;

  <bb 2>:
  init_array ();
  D.3614 = pthread_self ();
  D.3615 = (long int) D.3614;
  D.3616 = omp_get_thread_num ();
  D.3617 = (long int) D.3616;
  stdout.4 = stdout;
  fprintf (stdout.4, "Thread[%lu,%lu]: Before parallel region.\n", D.3617, D.3615);
  #pragma omp parallel num_threads(4) [child fn: main._omp_fn.1 (???)]

  <bb 3>:
  #pragma omp single

  <bb 4>:
  D.3637 = __builtin_GOMP_single_start ();
  if (D.3637 == 1)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  D.3619 = pthread_self ();
  D.3620 = (long int) D.3619;
  D.3621 = omp_get_thread_num ();
  D.3622 = (long int) D.3621;
  stdout.5 = stdout;
  fprintf (stdout.5, "  Thread[%lu,%lu]: Before tasks.\n", D.3622, D.3620);
  func ();

  <bb 6>:
  #pragma omp return

  <bb 7>:
  #pragma omp return

  <bb 8>:
  D.3624 = pthread_self ();
  D.3625 = (long int) D.3624;
  D.3626 = omp_get_thread_num ();
  D.3627 = (long int) D.3626;
  stdout.6 = stdout;
  fprintf (stdout.6, "Thread[%lu,%lu]: After parallel region.\n", D.3627, D.3625);
  D.3629 = 0;

<L2>:
  return D.3629;

}


