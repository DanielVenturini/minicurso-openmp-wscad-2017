
;; Function func (func, funcdef_no=2, decl_uid=3553, cgraph_uid=2, symbol_order=2)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;;
;; Loop 1
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;; 2 succs { 3 13 }
;; 3 succs { 4 11 }
;; 4 succs { 5 9 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 5 9 }
;; 9 succs { 10 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 3 13 }
;; 13 succs { 14 }
;; 14 succs { 1 }
func ()
{
  struct _IO_FILE * stdout.1;
  int D.3571;
  long int D.3570;
  long unsigned int D.3569;
  int j;
  int i;
  struct _IO_FILE * stdout.0;
  int D.3567;
  long int D.3566;
  long unsigned int D.3565;
  struct  .omp_data_o.3;
  long int D.3574;
  long int D.3573;

  <bb 2>:
  D.3565 = pthread_self ();
  D.3566 = (long int) D.3565;
  D.3567 = omp_get_thread_num ();
  stdout.0 = stdout;
  fprintf (stdout.0, "Thread[%lu,%lu]: taskloop...\n", D.3567, D.3566);
  #pragma omp taskloop grainsize(2) num_tasks(8)
  for (i = 0; i <= 15; i = i + 1)

  <bb 3>:
  #pragma omp taskloop _looptemp_(D.3574) _looptemp_(D.3573) private(j) private(i) [child fn: func._omp_fn.0 (.omp_data_o.3)]

  <bb 4>:
  .omp_data_i = (struct  & restrict) &.omp_data_o.3;
  D.3580 = .omp_data_i->D.3579;
  D.3582 = .omp_data_i->D.3581;
  #pragma omp taskloop _looptemp_(D.3580) _looptemp_(D.3582)
  for (i = 0; i <= 15; i = i + 1)

  <bb 5>:
  j = 0;
  goto <bb 7>;

  <bb 6>:
  D.3569 = pthread_self ();
  D.3570 = (long int) D.3569;
  D.3571 = omp_get_thread_num ();
  stdout.1 = stdout;
  fprintf (stdout.1, "Thread[%lu,%lu]: Trabalhando na iteração (%d,%d).\n", D.3571, D.3570, i, j);
  j = j + 1;

  <bb 7>:
  if (j < i)
    goto <bb 6>;
  else
    goto <bb 8>;

  <bb 8>:
  #pragma omp continue (i, i)

  <bb 9>:
  #pragma omp return

  <bb 10>:
  #pragma omp continue (0, 0)

  <bb 11>:
  #pragma omp return

  <bb 12>:
  .omp_data_o.3 = {CLOBBER};
  #pragma omp continue (i, i)

  <bb 13>:
  #pragma omp return

  <bb 14>:
  return;

}



;; Function main (main, funcdef_no=3, decl_uid=3562, cgraph_uid=3, symbol_order=3)

Removing basic block 16
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
;; 2 succs { 3 }
;; 3 succs { 4 }
;; 4 succs { 5 13 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 }
;; 9 succs { 10 11 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 13 }
;; 13 succs { 14 }
;; 14 succs { 15 }
;; 15 succs { 16 }
;; 16 succs { 1 }
main (int argc, char * * argv)
{
  _Bool D.3640;
  int D.3624;
  struct _IO_FILE * stdout.8;
  long int D.3622;
  int D.3621;
  long int D.3620;
  long unsigned int D.3619;
  struct _IO_FILE * stdout.4;
  long int D.3604;
  int D.3603;
  long int D.3602;
  long unsigned int D.3601;

  <bb 2>:
  D.3601 = pthread_self ();
  D.3602 = (long int) D.3601;
  D.3603 = omp_get_thread_num ();
  D.3604 = (long int) D.3603;
  stdout.4 = stdout;
  fprintf (stdout.4, "Thread[%lu,%lu]: Before parallel region.\n", D.3604, D.3602);
  #pragma omp parallel num_threads(4) [child fn: main._omp_fn.1 (???)]

  <bb 3>:
  #pragma omp single

  <bb 4>:
  D.3640 = __builtin_GOMP_single_start ();
  if (D.3640 == 1)
    goto <bb 5>;
  else
    goto <bb 13>;

  <bb 5>:
  D.3606 = pthread_self ();
  D.3607 = (long int) D.3606;
  D.3608 = omp_get_thread_num ();
  D.3609 = (long int) D.3608;
  stdout.5 = stdout;
  fprintf (stdout.5, "  Thread[%lu,%lu]: Before tasks.\n", D.3609, D.3607);
  #pragma omp taskgroup

  <bb 6>:
  __builtin_GOMP_taskgroup_start ();
  #pragma omp task [child fn: main._omp_fn.2 (???)]

  <bb 7>:
  D.3611 = pthread_self ();
  D.3612 = (long int) D.3611;
  D.3613 = omp_get_thread_num ();
  stdout.6 = stdout;
  fprintf (stdout.6, "Thread[%lu,%lu]: Trabalhando na task avulsa.\n", D.3613, D.3612);
  #pragma omp continue (0, 0)

  <bb 8>:
  #pragma omp return

  <bb 9>:
  #pragma omp task [child fn: main._omp_fn.3 (???)]

  <bb 10>:
  D.3615 = pthread_self ();
  D.3616 = (long int) D.3615;
  D.3617 = omp_get_thread_num ();
  stdout.7 = stdout;
  fprintf (stdout.7, "Thread[%lu,%lu]: Trabalhando na task func().\n", D.3617, D.3616);
  func ();
  #pragma omp continue (0, 0)

  <bb 11>:
  #pragma omp return

  <bb 12>:
  __builtin_GOMP_taskgroup_end ();
  #pragma omp return(nowait)

  <bb 13>:
  #pragma omp return

  <bb 14>:
  #pragma omp return

  <bb 15>:
  D.3619 = pthread_self ();
  D.3620 = (long int) D.3619;
  D.3621 = omp_get_thread_num ();
  D.3622 = (long int) D.3621;
  stdout.8 = stdout;
  fprintf (stdout.8, "Thread[%lu,%lu]: After parallel region.\n", D.3622, D.3620);
  D.3624 = 0;

<L2>:
  return D.3624;

}


